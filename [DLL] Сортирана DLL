import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class DLLNode<E> {
    protected E element;
    protected DLLNode<E> pred, succ;

    public DLLNode(E elem, DLLNode<E> pred, DLLNode<E> succ) {
        this.element = elem;
        this.pred = pred;
        this.succ = succ;
    }

    @Override
    public String toString() {
        return element.toString();
    }
}

class DLL<E> {
    protected DLLNode<E> first, last;

    public DLL() {
        // Construct an empty SLL
        this.first = null;
        this.last = null;
    }

    public void deleteList() {
        first = null;
        last = null;
    }

    public int length() {
        int ret;
        if (first != null) {
            DLLNode<E> tmp = first;
            ret = 1;
            while (tmp.succ != null) {
                tmp = tmp.succ;
                ret++;
            }
            return ret;
        } else
            return 0;

    }

    public DLLNode<E> find(E o) {
        if (first != null) {
            DLLNode<E> tmp = first;
            while (tmp.element != o && tmp.succ != null)
                tmp = tmp.succ;
            if (tmp.element == o) {
                return tmp;
            } else {
                System.out.println("Elementot ne postoi vo listata");
            }
        } else {
            System.out.println("Listata e prazna");
        }
        return first;
    }

    public void insertFirst(E o) {
        DLLNode<E> ins = new DLLNode<E>(o, null, first);
        if (first == null)
            last = ins;
        else
            first.pred = ins;
        first = ins;
    }

    public void insertLast(E o) {
        if (first == null)
            insertFirst(o);
        else {
            DLLNode<E> ins = new DLLNode<E>(o, last, null);
            last.succ = ins;
            last = ins;
        }
    }

    public void insertAfter(E o, DLLNode<E> after) {
        if(after==last){
            insertLast(o);
            return;
        }
        DLLNode<E> ins = new DLLNode<E>(o, after, after.succ);
        after.succ.pred = ins;
        after.succ = ins;
    }

    public void insertBefore(E o, DLLNode<E> before) {
        if(before == first){
            insertFirst(o);
            return;
        }
        DLLNode<E> ins = new DLLNode<E>(o, before.pred, before);
        before.pred.succ = ins;
        before.pred = ins;
    }

    public E deleteFirst() {
        if (first != null) {
            DLLNode<E> tmp = first;
            first = first.succ;
            if (first != null) first.pred = null;
            if (first == null)
                last = null;
            return tmp.element;
        } else
            return null;
    }

    public E deleteLast() {
        if (first != null) {
            if (first.succ == null)
                return deleteFirst();
            else {
                DLLNode<E> tmp = last;
                last = last.pred;
                last.succ = null;
                return tmp.element;
            }
        }
        // else throw Exception
        return null;
    }

    public E delete(DLLNode<E> node) {
        if(node==first){
            deleteFirst();
            return node.element;
        }
        if(node==last){
            deleteLast();
            return node.element;
        }
        node.pred.succ = node.succ;
        node.succ.pred = node.pred;
        return node.element;

    }

    @Override
    public String toString() {
        String ret = new String();
        if (first != null) {
            DLLNode<E> tmp = first;
            ret += tmp + "<->";
            while (tmp.succ != null) {
                tmp = tmp.succ;
                ret += tmp + "<->";
            }
        } else
            ret = "Prazna lista!!!";
        return ret;
    }

    public String toStringR() {
        String ret = new String();
        if (last != null) {
            DLLNode<E> tmp = last;
            ret += tmp + "<->";
            while (tmp.pred != null) {
                tmp = tmp.pred;
                ret += tmp + "<->";
            }
        } else
            ret = "Prazna lista!!!";
        return ret;
    }

    public DLLNode<E> getFirst() {
        return first;
    }

    public DLLNode<E> getLast() {

        return last;
    }

    public DLLNode<E> mergeSort(DLLNode<E> head){
        if(head == null || head.succ == null)
            return head;

        DLLNode<E> middle = findMiddle(head);
        DLLNode<E> nextToMiddle = middle.succ;

        middle.succ = null;
        DLLNode<E> left = mergeSort(head);
        DLLNode<E> right = mergeSort(nextToMiddle);

        DLLNode<E> sortedListNode = sortedList(left,right);
        return sortedListNode;
    }

    private DLLNode<E> sortedList(DLLNode<E> a, DLLNode<E> b){
        if(a == null)
            return b;
        if(b == null)
            return a;

        if((Integer)a.element > (Integer)b.element){
            a.succ = sortedList(a.succ,b);
            a.succ.pred = a;
            a.pred = null;
            return a;
        } else {
            b.succ = sortedList(a, b.succ);
            b.succ.pred = b;
            b.pred = null;
            return b;
        }
    }

    private DLLNode<E> findMiddle(DLLNode<E> head){
        if(head == null)
            return head;

        DLLNode<E> fastPtr = head.succ;
        DLLNode<E> slowPtr = head;

        while(fastPtr != null){
            fastPtr = fastPtr.succ;
            if(fastPtr != null){
                fastPtr = fastPtr.succ;
                slowPtr = slowPtr.succ;
            }
        }
        return slowPtr;
    }

    void print(DLLNode node) {
        DLLNode temp = node;
        //System.out.println("Forward Traversal using next pointer");
        while (node != null) {
            //System.out.print(node.element + " ");
            temp = node;
            node = node.succ;
        }
        System.out.println("\nBackward Traversal using prev pointer");
        while (temp != null) {
            System.out.print(temp + " ");
            temp = temp.pred;
        }
    }
}

public class SLLKompanija {
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        DLL<Integer> list = new DLL<>();

        for (int i=0; i<n; i++){
            list.insertLast(Integer.parseInt(br.readLine()));
        }

        list.first = list.mergeSort(list.getFirst());
        list.print(list.getFirst());
    }
}
