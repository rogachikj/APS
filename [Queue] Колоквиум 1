/*
*Се организира колоквиумска недела на ФИНКИ и за таа цел асистентите се доделуваат за 
 *чување на испити. За таа цел се прави редица од асистентите во која на почеток се 
 *nајмладите асистенти, а на крај се највозрасните. Потоа се даваат предметите и по колку
 *асистенти се потребни за чување на секој предмет.Има некои асистенти кои се отсутни 
 *во тековната колоквиумска недела. Затоа дополнително се дава список кои од асистентите
 *се отсутни. Асистентите се доделуваат на следниот начин: Прво се доделуваат најмладите,
 *а на крај најстарите, со тоа што ако некој асистент е отсутен тој се игнорира во редицата.
 *После секое доделување на предмет асистентот се сместува на крај на редицата (т.е. ако на 
 *секој асистент му се доделил за чување предмет, а има потреба од уште асистенти, повторно 
 *се започнува од најмладите).
Влез: Се дава прво бројот на асистенти и имињата на асистентите од најмлад до најстар. 
Следно се дава бројот на предмети за кои се потребни асистенти, па се наведуваат предметите
и по колку асистенти се потребни за секој предмет. Потоа се дава бројот на асистенти кои се
отсутни и списокот на тековно отсутните асистенти. 
На излез се печати предмет, па асистенти задолжени за чување на тој предмет (за секој од дадените предмети).*/
 
/*Sample input
4
IlinkaIvanoska
IgorKulev
MagdalenaKostoska
HristinaMihajloska
3
APS 3
MIS 1
OOS 2
1
HristinaMihajloska
 
Sample output
APS
3
IlinkaIvanoska
IgorKulev
MagdalenaKostoska
MIS
1
IlinkaIvanoska
OOS
2
IgorKulev
MagdalenaKostoska
*/

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.NoSuchElementException;

interface Queue<E> {

    // Elementi na redicata se objekti od proizvolen tip.

    // Metodi za pristap:

    public boolean isEmpty ();
    // Vrakja true ako i samo ako redicata e prazena.

    public int size ();
    // Ja vrakja dolzinata na redicata.

    public E peek ();
    // Go vrakja elementot na vrvot t.e. pocetokot od redicata.

    // Metodi za transformacija:

    public void clear ();
    // Ja prazni redicata.

    public void enqueue (E x);
    // Go dodava x na kraj od redicata.

    public E dequeue ();
    // Go otstranuva i vrakja pochetniot element na redicata.

}


class LinkedQueue<E> implements Queue<E> {

    // Redicata e pretstavena na sledniot nacin:
    // length go sodrzi brojot na elementi.
    // Elementite se zachuvuvaat vo jazli dod SLL
    // front i rear se linkovi do prviot i posledniot jazel soodvetno.
    SLLNode<E> front, rear;
    int length;

    // Konstruktor ...

    public LinkedQueue () {
        clear();
    }

    public boolean isEmpty () {
        // Vrakja true ako i samo ako redicata e prazena.
        return (length == 0);
    }

    public int size () {
        // Ja vrakja dolzinata na redicata.
        return length;
    }

    public E peek () {
        // Go vrakja elementot na vrvot t.e. pocetokot od redicata.
        if (front == null)
            throw new NoSuchElementException();
        return front.element;
    }

    public void clear () {
        // Ja prazni redicata.
        front = rear = null;
        length = 0;
    }

    public void enqueue (E x) {
        // Go dodava x na kraj od redicata.
        SLLNode<E> latest = new SLLNode<E>(x, null);
        if (rear != null) {
            rear.succ = latest;
            rear = latest;
        } else
            front = rear = latest;
        length++;
    }

    public E dequeue () {
        // Go otstranuva i vrakja pochetniot element na redicata.
        if (front != null) {
            E frontmost = front.element;
            front = front.succ;
            if (front == null)  rear = null;
            length--;
            return frontmost;
        } else
            throw new NoSuchElementException();
    }

}
class SLLNode<E> {
    protected E element;
    protected SLLNode<E> succ;

    public SLLNode(E elem, SLLNode<E> succ) {
        this.element = elem;
        this.succ = succ;
    }

    @Override
    public String toString() {
        return element.toString();
    }
}

public class Asistenti {
    public static void main (String [] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int brAsistenti = Integer.parseInt(br.readLine());
        LinkedQueue<String> asistenti = new LinkedQueue<>();

        for(int i=0;i<brAsistenti; i++)
            asistenti.enqueue(br.readLine());

        int brPredmeti = Integer.parseInt(br.readLine());
        LinkedQueue<String> predmeti = new LinkedQueue<>();

        for(int i=0; i<brPredmeti; i++)
            predmeti.enqueue(br.readLine());

        int brOtsutniProf = Integer.parseInt(br.readLine());
        String otsutniArr [] = new String [brOtsutniProf];

        for(int i=0; i<brOtsutniProf; i++){
            otsutniArr[i] = br.readLine();
        }

        LinkedQueue<String> asistentiFinal = new LinkedQueue<>();

        while(!asistenti.isEmpty()){
            int flag = 1;
            for(int i=0; i<brOtsutniProf; i++){
                if(asistenti.peek().equals(otsutniArr[i])){
                    flag = 0;
                    break;
                }
            }
            if(flag == 0){
                asistenti.dequeue();
            } else {
                asistentiFinal.enqueue(asistenti.dequeue());
            }
        }

        while(!predmeti.isEmpty()){
            String razdeliPredmet [] = predmeti.dequeue().split(" ");
            String imePredmet = razdeliPredmet[0];
            int potrebniAsistenti = Integer.parseInt(razdeliPredmet[1]);

            System.out.println(imePredmet);
            System.out.println(potrebniAsistenti);
            for(int i=0; i<potrebniAsistenti; i++){
                System.out.println(asistentiFinal.peek());
                asistentiFinal.enqueue(asistentiFinal.dequeue());
            }
        }
    }
}
